<?php

namespace App;

use Exception;
use PDO;
use PDOException;
use Dotenv\Dotenv;

class DBConnection_MySQL
{

  private string $host;
  private int $port;
  private string $username;
  private string $password;
  private string $database;

  public ?PDO $pdo;
  

  public function __construct()
  {
    $this->configure();
    echo "host: $this->host\n";
    echo "port: $this->port\n";
    echo "username: $this->username\n";
    echo "password: $this->password\n";
    echo "database: $this->database\n";
    //try {
    $this->pdo = new PDO("mysql:host=$this->host;port=$this->port;dbname=$this->database", $this->username, $this->password);
    $this->createUsersTable();
    //} catch (PDOException $e) {
    //throw new Exception("Database connection failed: " . $e->getMessage());
    // }
  }
  private function configure(): void
  {
    $dotenv = Dotenv::createImmutable(__DIR__ . '/..');
    $dotenv->load();

    $this->host = $_ENV['DB_HOST'];
    $this->port = $_ENV['DB_PORT'];
    $this->username = $_ENV['DB_USER'];
    $this->password = $_ENV['DB_PASSWORD'];
    $this->database = $_ENV['DB_DATABASE'];
  }

  private function createUsersTable(): void
  {
    $query = "CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(50) NOT NULL,
      password VARCHAR(255) NOT NULL
    )";
    $this->pdo->exec($query);
  }



  public function query(string $query, array $params = [], array $types = []): array
  {
    $stmt = $this->pdo->prepare($query);
    $i = 0;
    foreach ($params as $key => $value) {
      $type = isset($types[$key]) ? $types[$key] : PDO::PARAM_STR;
      $stmt->bindValue(":$key", $value, $type);
      $i++;
    }
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $result;
  }

  public function __destruct()
  {
    $this->pdo = null;
  }
}
